import datetime
from fastapi import FastAPI, Query, HTTPException
from starlette.responses import Response
from datetime import timedelta 

import nocodb_client
import booking_logic
import schemas

app = FastAPI(
    title="ArtChaos API",
    description="API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –≤ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π.",
    version="1.0.0"
)

USER_BOOKING_CACHE = {}
CACHE_LIFETIME_MINUTES = 30

def parse_date_from_str(date_str: str) -> datetime.date:
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ 'dd.mm.yyyy'."""
    try:
        return datetime.datetime.strptime(date_str, "%d.%m.%Y").date()
    except ValueError:
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 400 Bad Request
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –û–∂–∏–¥–∞–µ—Ç—Å—è dd.mm.yyyy")


@app.get("/api/v1/available_start_times")
async def get_start_times(
    date_str: str = Query(..., alias="date"), 
    equipment: str | None = Query(None)
):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON –≤–∏–¥–∞ {"result": "10:00,10:30,14:00"}
    """
    date = parse_date_from_str(date_str)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ NocoDB
    bookings = await nocodb_client.get_bookings_by_date(date_str)
    events = await nocodb_client.get_events_by_date(date_str)
    
    # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∞–π–º–ª–∞–π–Ω
    timeline = booking_logic.calculate_timeline_load(bookings, events)
    
    # 3. –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã —Å —É—á–µ—Ç–æ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    available_times = booking_logic.get_available_start_times(timeline, date, equipment_required=equipment)
    
    # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ json
    result_string = ",".join(available_times)
    return {"result": result_string}


@app.get("/api/v1/check_duration")
async def check_duration(
    date_str: str = Query(..., alias="date"), 
    start_time: str = Query(...),
    equipment: str | None = Query(None)
):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON –≤–∏–¥–∞ {"result": "2.5"}
    """
    parse_date_from_str(date_str)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ NocoDB
    bookings = await nocodb_client.get_bookings_by_date(date_str)
    events = await nocodb_client.get_events_by_date(date_str)
    
    # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∞–π–º–ª–∞–π–Ω
    timeline = booking_logic.calculate_timeline_load(bookings, events)
    
    # 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    max_duration = booking_logic.get_max_duration(start_time, timeline, equipment_required=equipment)

    # 4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ json
    return {"result": max_duration}


@app.post("/api/v1/bookings", status_code=201) # status_code=201 –æ–∑–Ω–∞—á–∞–µ—Ç "Created"
async def create_booking(booking_data: schemas.BookingCreate):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –±—Ä–æ–Ω–∏ —Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π.
    """
    
    parse_date_from_str(booking_data.date)
    # --- –®–∞–≥ 1: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç "–≥–æ–Ω–∫–∏") ---
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ NocoDB
    latest_bookings = await nocodb_client.get_bookings_by_date(booking_data.date)
    latest_events = await nocodb_client.get_events_by_date(booking_data.date)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
    timeline = booking_logic.calculate_timeline_load(latest_bookings, latest_events)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, –∫–∞–∫–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ü–†–Ø–ú–û –°–ï–ô–ß–ê–°
    current_max_duration = booking_logic.get_max_duration(
        start_time_str=booking_data.start_time,
        timeline=timeline,
        equipment_required=booking_data.equipment
    )
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ,
    # –∑–Ω–∞—á–∏—Ç, —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è–ª–∏.
    if booking_data.duration_hours > current_max_duration:
        raise HTTPException(
            status_code=409, # 409 Conflict - –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–¥ –¥–ª—è —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
            detail="–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ –≤—Ä–µ–º—è –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–Ω—è–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ."
        )

    # --- –®–∞–≥ 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è NocoDB ---
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    start_dt = datetime.datetime.strptime(booking_data.start_time, "%H:%M")
    duration = timedelta(hours=booking_data.duration_hours)
    end_dt = start_dt + duration
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Å—ë –≤ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞–µ—Ç NocoDB
    data_for_nocodb = {
        "Telegram": booking_data.telegram,
        "–î–∞—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è": booking_data.date,
        "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞": start_dt.strftime("%H:%M:%S"),
        "–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞": end_dt.strftime("%H:%M:%S"),
        "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": booking_data.equipment,
        "–ß—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å": booking_data.activity
    }

    # --- –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ---
    
    new_booking = await nocodb_client.create_booking(data_for_nocodb)
    
    if not new_booking:
        # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –∑–∞–ø–∏—Å—å –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É —Å–µ—Ä–≤–µ—Ä–∞
        raise HTTPException(
            status_code=500,
            detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        
    # --- –®–∞–≥ 4: –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç ---
    
    return {"status": "success", 
            "booking_details": new_booking,
            "end_time": end_dt.strftime("%H:%M")
            }
    
    
@app.get("/api/v1/my_bookings")
async def get_my_bookings(username: str):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –±—É–¥—É—â–∏–µ –±—Ä–æ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Ö –≤ –∫—Ä–∞—Å–∏–≤—É—é —Å—Ç—Ä–æ–∫—É
    –∏ –∫—ç—à–∏—Ä—É–µ—Ç ID –±—Ä–æ–Ω–µ–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–º–µ–Ω—ã.
    """
    all_bookings = await nocodb_client.get_all_bookings_by_username(username)
    
    # --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ---
    future_bookings = []
    now_aware = datetime.datetime.now(booking_logic.WORKSHOP_TIMEZONE)

    for booking in all_bookings:
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏ –≤ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            booking_date = datetime.datetime.strptime(booking["–î–∞—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è"], "%d.%m.%Y").date()
            booking_time = datetime.datetime.strptime(booking["–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞"], "%H:%M:%S").time()
            booking_datetime = datetime.datetime.combine(booking_date, booking_time)
            
            # –î–µ–ª–∞–µ–º –æ–±—ä–µ–∫—Ç "–æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–º" –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            booking_datetime_aware = booking_datetime.replace(tzinfo=booking_logic.WORKSHOP_TIMEZONE)

            if booking_datetime_aware > now_aware:
                future_bookings.append(booking)
        except (ValueError, KeyError):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –µ—Å—Ç—å
            continue

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç –±–ª–∏–∂–∞–π—à–µ–π –∫ —Å–∞–º–æ–π –¥–∞–ª—å–Ω–µ–π
    future_bookings.sort(key=lambda b: (
        datetime.datetime.strptime(b["–î–∞—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è"], "%d.%m.%Y"),
        datetime.datetime.strptime(b["–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞"], "%H:%M:%S")
    ))

    # --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—ç—à–∞ ---
    if not future_bookings:
        no_bookings_text = "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.\n–•–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? üëá"
        return {"result": no_bookings_text}

    formatted_lines = ["–¢–≤–æ–∏ –∑–∞–ø–∏—Å–∏: \n"]
    booking_map = {} # –ö–∞—Ä—Ç–∞ –¥–ª—è –∫—ç—à–∞: "1" -> "recAbc123"

    for i, booking in enumerate(future_bookings, 1):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, —É–±–∏—Ä–∞—è —Å–µ–∫—É–Ω–¥—ã
        start_time_short = booking['–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞'][:5]
        line = f"{i}. üìÜ {booking['–î–∞—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è']} –≤ {start_time_short}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if booking.get("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"):
            line += f" (üìç {booking['–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ']})"
            
        activity_description = booking.get("–ß—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å")
        if activity_description:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –æ—Ç—Å—Ç—É–ø–æ–º –∏ –≤ –∫—É—Ä—Å–∏–≤–µ
            line += f"\n  üìù {activity_description}"
            
        formatted_lines.append(line)
        booking_map[str(i)] = booking['Id']

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –≤ –∫—ç—à
    USER_BOOKING_CACHE[username] = {
        "map": booking_map,
        "timestamp": datetime.datetime.now()
    }

    final_text = "\n\n".join(formatted_lines)
    return {"result": final_text}


@app.post("/api/v1/cancel_booking")
async def cancel_booking(cancel_data: schemas.BookingCancel):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –±—Ä–æ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–º–µ—Ä –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    """
    username = cancel_data.username
    booking_number = cancel_data.booking_number
    
    # --- –°—Ü–µ–Ω–∞—Ä–∏–π: –ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª ---
    cached_user_data = USER_BOOKING_CACHE.get(username)
    
    if not cached_user_data:
        return {
            "status": "error",
            "message": "–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π '–ú–æ–∏ –∑–∞–ø–∏—Å–∏' –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."
        }
    
    cache_age = datetime.datetime.now() - cached_user_data["timestamp"]
    if cache_age > timedelta(minutes=CACHE_LIFETIME_MINUTES):
        del USER_BOOKING_CACHE[username] # –ß–∏—Å—Ç–∏–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
        return {
            "status": "error",
            "message": "–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —É—Å—Ç–∞—Ä–µ–ª (–ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π '–ú–æ–∏ –∑–∞–ø–∏—Å–∏' –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."
        }

    # --- –°—Ü–µ–Ω–∞—Ä–∏–π: –ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ ---
    booking_id_to_delete = cached_user_data["map"].get(booking_number)
    
    if not booking_id_to_delete:
        return {
            "status": "error",
            "message": f"–ó–∞–ø–∏—Å–∏ —Å –Ω–æ–º–µ—Ä–æ–º {booking_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–≤–æ—ë–º —Å–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –Ω–æ–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."
        }
        
    # --- –°—Ü–µ–Ω–∞—Ä–∏–π: –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ ---
    success = await nocodb_client.delete_booking_by_id(booking_id_to_delete)
    
    if success:
        del USER_BOOKING_CACHE[username]
        return {
            "status": "success",
            "message": "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!"
        }
    else:
        return {
            "status": "error",
            "message": "–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Å—å —Å @egor_savenko"
        }